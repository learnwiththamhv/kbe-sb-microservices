apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: mysql
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.7
        name: mysql
        resources: {}
        env:
          - name: MYSQL_ROOT_PASSWORD
            value: dbpassword
          - name: MYSQL_DATABASE
            value: beerservice
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: mysql
  name: mysql
spec:
  ports:
  - name: 3306-3306
    port: 3306
    protocol: TCP
    targetPort: 3306
  selector:
    app: mysql
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: jms
  name: jms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jms
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: jms
    spec:
      containers:
      - image: vromero/activemq-artemis
        name: activemq-artemis
        resources: {}
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: jms
  name: jms
spec:
  ports:
  - name: 8161-8161
    port: 8161
    protocol: TCP
    targetPort: 8161
  - name: 61616-61616
    port: 61616
    protocol: TCP
    targetPort: 61616
  selector:
    app: jms
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: elasticsearch
  name: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: elasticsearch
    spec:
      containers:
      - image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1
        name: elasticsearch
        resources: {}
        env:
          - name: discovery.type
            value: single-node
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: elasticsearch
  name: elasticsearch
spec:
  ports:
  - name: 9200-9200
    port: 9200
    protocol: TCP
    targetPort: 9200
  selector:
    app: elasticsearch
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-config
  namespace: default
  labels:
    k8s-app: filebeat
data:
  filebeat.yml: |-
    filebeat.autodiscover:
      providers:
        - type: kubernetes
          node: ${NODE_NAME}
          hints.enabled: true
          hints.default_config.enabled: false
          hints.default_config:
            type: container
            paths:
              - /var/log/containers/*${data.kubernetes.container.id}.log
            processors:
                - decode_json_fields:
                      fields: ["message"]
                      target: ""
                      overwrite_keys: true
    processors:
      - add_cloud_metadata:
      - add_host_metadata:

    cloud.id: ${ELASTIC_CLOUD_ID}
    cloud.auth: ${ELASTIC_CLOUD_AUTH}

    output.elasticsearch:
      hosts: ['${ELASTICSEARCH_HOST:elasticsearch}:${ELASTICSEARCH_PORT:9200}']
      username: ${ELASTICSEARCH_USERNAME}
      password: ${ELASTICSEARCH_PASSWORD}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: filebeat
  namespace: default
  labels:
    k8s-app: filebeat
spec:
  selector:
    matchLabels:
      k8s-app: filebeat
  template:
    metadata:
      labels:
        k8s-app: filebeat
    spec:
      serviceAccountName: filebeat
      terminationGracePeriodSeconds: 30
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: filebeat
        image: docker.elastic.co/beats/filebeat:7.12.0
        args: [
          "-c", "/etc/filebeat.yml",
          "-e",
        ]
        env:
        - name: ELASTICSEARCH_HOST
          value: elasticsearch
        - name: ELASTICSEARCH_PORT
          value: "9200"
        - name: ELASTICSEARCH_USERNAME
          value: elastic
        - name: ELASTICSEARCH_PASSWORD
          value: changeme
        - name: ELASTIC_CLOUD_ID
          value:
        - name: ELASTIC_CLOUD_AUTH
          value:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          runAsUser: 0
          # If using Red Hat OpenShift uncomment this:
          #privileged: true
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - name: config
          mountPath: /etc/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: varlog
          mountPath: /var/log
          readOnly: true
      volumes:
      - name: config
        configMap:
          defaultMode: 0640
          name: filebeat-config
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: varlog
        hostPath:
          path: /var/log
      # data folder stores a registry of read status for all files, so we don't send everything again on a Filebeat pod restart
      - name: data
        hostPath:
          # When filebeat runs as non-root user, this directory needs to be writable by group (g+w).
          path: /var/lib/filebeat-data
          type: DirectoryOrCreate
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: filebeat
subjects:
- kind: ServiceAccount
  name: filebeat
  namespace: default
roleRef:
  kind: ClusterRole
  name: filebeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: filebeat
  labels:
    k8s-app: filebeat
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - namespaces
  - pods
  - nodes
  verbs:
  - get
  - watch
  - list
- apiGroups: ["apps"]
  resources:
    - replicasets
  verbs: ["get", "list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: filebeat
  namespace: default
  labels:
    k8s-app: filebeat
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: kibana
  name: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: kibana
    spec:
      containers:
      - image: docker.elastic.co/kibana/kibana:7.12.1
        name: kibana
        resources: {}
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: kibana
  name: kibana
spec:
  ports:
  - name: 5601-5601
    port: 5601
    protocol: TCP
    targetPort: 5601
  selector:
    app: kibana
  type: NodePort
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: gateway
  name: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: gateway
    spec:
      containers:
      - image: springframeworkguru/kbe-brewery-gateway
        name: kbe-brewery-gateway
        resources: {}
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: gateway
  name: gateway
spec:
  ports:
  - name: 9090-9090
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app: gateway
  type: NodePort
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: beer-service
  name: beer-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: beer-service
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: beer-service
      annotations:
        co.elastic.logs/enabled: "true"
        co.elastic.logs.json-logging/json.keys_under_root: "true"
        co.elastic.logs.json-logging/json.add_error_key: "true"
        co.elastic.logs.json-logging/json.message_key: "message"
    spec:
      containers:
      - image: springframeworkguru/kbe-brewery-beer-service
        name: kbe-brewery-beer-service
        resources: {}
        env:
          - name: SPRING_DATASOURCE_USER
            value: root
          - name: SPRING_DATASOURCE_PASSWORD
            value: dbpassword
          - name: SPRING_JPA_HIBERNATE_DDL-AUTO
            value: update
          - name: SPRING_DATASOURCE_URL
            value: jdbc:mysql://mysql:3306/beerservice?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
          - name: SPRING_ARTEMIS_HOST
            value: jms
          - name: SFG_BREWERY_BEER-INVENTORY-SERVICE-HOST
            value: http://inventory-service:8082
          - name: MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED
            value: "true"
          - name: MANAGEMENT_HEALTH_READINESSTATE_ENABLED
            value: "true"
          - name: MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED
            value: "true"
          - name: SERVER_SHUTDOWN
            value: "graceful"
        readinessProbe:
          httpGet:
            port: 8080
            path: /actuator/health/readiness
        livenessProbe:
          httpGet:
            port: 8080
            path: /actuator/health/liveness
        lifecycle:
          preStop:
            exec:
              command: ["sh", "-c", "sleep 10"]
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: beer-service
  name: beer-service
spec:
  ports:
  - name: 8080-8080
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: beer-service
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: order-service
  name: order-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-service
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: order-service
      annotations:
        co.elastic.logs/enabled: "true"
        co.elastic.logs.json-logging/json.keys_under_root: "true"
        co.elastic.logs.json-logging/json.add_error_key: "true"
        co.elastic.logs.json-logging/json.message_key: "message"
    spec:
      containers:
      - image: springframeworkguru/kbe-brewery-order-service
        name: kbe-brewery-order-service
        resources: {}
        env:
          - name: SPRING_DATASOURCE_USER
            value: root
          - name: SPRING_DATASOURCE_PASSWORD
            value: dbpassword
          - name: SPRING_JPA_HIBERNATE_DDL-AUTO
            value: update
          - name: SPRING_DATASOURCE_URL
            value: jdbc:mysql://mysql:3306/beerservice?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
          - name: SPRING_ARTEMIS_HOST
            value: jms
          - name: SFG_BREWERY_BEER-SERVICE-HOST
            value: http://beer-service:8080
          - name: MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED
            value: "true"
          - name: MANAGEMENT_HEALTH_READINESSTATE_ENABLED
            value: "true"
          - name: MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED
            value: "true"
          - name: SERVER_SHUTDOWN
            value: "graceful"
        readinessProbe:
          httpGet:
            port: 8081
            path: /actuator/health/readiness
        livenessProbe:
          httpGet:
            port: 8081
            path: /actuator/health/liveness
        lifecycle:
          preStop:
            exec:
              command: ["sh", "-c", "sleep 10"]
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: order-service
  name: order-service
spec:
  ports:
  - name: 8081-8081
    port: 8081
    protocol: TCP
    targetPort: 8081
  selector:
    app: order-service
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: inventory-service
  name: inventory-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: inventory-service
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: inventory-service
      annotations:
        co.elastic.logs/enabled: "true"
        co.elastic.logs.json-logging/json.keys_under_root: "true"
        co.elastic.logs.json-logging/json.add_error_key: "true"
        co.elastic.logs.json-logging/json.message_key: "message"
    spec:
      containers:
      - image: springframeworkguru/kbe-brewery-inventory-service
        name: kbe-brewery-inventory-service
        resources: {}
        env:
          - name: SPRING_DATASOURCE_USER
            value: root
          - name: SPRING_DATASOURCE_PASSWORD
            value: dbpassword
          - name:  SPRING_JPA_HIBERNATE_DDL-AUTO
            value: update
          - name: SPRING_DATASOURCE_URL
            value: jdbc:mysql://mysql:3306/beerservice?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
          - name: SPRING_ARTEMIS_HOST
            value: jms
          - name: MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED
            value: "true"
          - name: MANAGEMENT_HEALTH_READINESSTATE_ENABLED
            value: "true"
          - name: MANAGEMENT_HEALTH_LIVENESSSTATE_ENABLED
            value: "true"
          - name: SERVER_SHUTDOWN
            value: "graceful"
        readinessProbe:
          httpGet:
            port: 8082
            path: /actuator/health/readiness
        livenessProbe:
          httpGet:
            port: 8082
            path: /actuator/health/liveness
        lifecycle:
          preStop:
            exec:
              command: ["sh", "-c", "sleep 10"]
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: inventory-service
  name: inventory-service
spec:
  ports:
  - name: 8082-8082
    port: 8082
    protocol: TCP
    targetPort: 8082
  selector:
    app: inventory-service
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: inventory-failover
  name: inventory-failover
spec:
  replicas: 1
  selector:
    matchLabels:
      app: inventory-failover
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: inventory-failover
      annotations:
        co.elastic.logs/enabled: "true"
        co.elastic.logs.json-logging/json.keys_under_root: "true"
        co.elastic.logs.json-logging/json.add_error_key: "true"
        co.elastic.logs.json-logging/json.message_key: "message"
    spec:
      containers:
      - image: springframeworkguru/kbe-brewery-inventory-failover
        name: kbe-brewery-inventory-failover
        resources: {}
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: inventory-failover
  name: inventory-failover
spec:
  ports:
  - name: 8083-8083
    port: 8083
    protocol: TCP
    targetPort: 8083
  selector:
    app: inventory-failover
  type: ClusterIP
status:
  loadBalancer: {}
---